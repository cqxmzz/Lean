{
  // this configuration file works by first loading all top-level
  // configuration items and then will load the specified environment
  // on top, this provides a layering affect. environment names can be
  // anything, and just require definition in this file. There's
  // two predefined environments, 'backtesting' and 'live', feel free
  // to add more!

  "environment": "backtesting",
  
  //alpha vantage configuration
  "alpha-vantage-api-key": "KEY",

  // FRED
  "fred-api-key": "",

  // To get your api access token go to quantconnect.com/account
  "job-user-id": "",
  "api-access-token": "",
  "job-organization-id": "",

  // custom params
  "smtp-client": "smtp.gmail.com",
  "smtp-port": 587,
  "email-address": "",
  "email-password": "",

  // parameters to set in the algorithm (the below are just samples)
  "parameters": {
    "ema-fast": 10,
    "ema-slow": 20
  },

  // Algorithm language selector - options CSharp, Python
  "algorithm-language": "Python",

  // algorithm class selector
  "algorithm-type-name": "MyTestAlgorithm",

  //Physical DLL location
  // "algorithm-location": "QuantConnect.Algorithm.CSharp.dll",
  "algorithm-location": "../../../Algorithm.Python/MyTestAlgorithm.py",

  //Research notebook
  "composer-dll-directory": "/Lean/Launcher/bin/Release/",

  // engine
  "data-folder": "../../../Data/",

  // debugging configuration - options for debugging-method LocalCmdLine, VisualStudio, Debugpy, PyCharm
  "debugging": true,
  "debugging-method": "Debugpy",

  "mute-python-library-logging": true,

  "close-automatically": true,

  // ml training params
  "scheduled-event-leaky-bucket-capacity" : 99999999,
  "scheduled-event-leaky-bucket-time-interval-minutes" : 1,
  "scheduled-event-leaky-bucket-refill-amount": 999999,

  // location of a python virtual env to use libraries from
  //"python-venv": "/venv",

  // handlers
  "log-handler": "QuantConnect.Logging.CompositeLogHandler",
  "messaging-handler": "QuantConnect.Messaging.Messaging",
  "job-queue-handler": "QuantConnect.Queues.JobQueue",
  "api-handler": "QuantConnect.Api.Api",
  "map-file-provider": "QuantConnect.Data.Auxiliary.LocalDiskMapFileProvider",
  "factor-file-provider": "QuantConnect.Data.Auxiliary.LocalDiskFactorFileProvider",
  "data-provider": "QuantConnect.Lean.Engine.DataFeeds.DownloaderDataProvider",
  "data-downloader": "QuantConnect.ToolBox.AlphaVantageDownloader.AlphaVantageDataDownloader",
  "downloader-data-provider-map-symbol": false,
  "use-factor-file-provider": false,
  "alpha-handler": "QuantConnect.Lean.Engine.Alphas.DefaultAlphaHandler",
  "data-channel-provider": "DataChannelProvider",
  "object-store": "QuantConnect.Lean.Engine.Storage.LocalObjectStore",
  "data-aggregator": "QuantConnect.Lean.Engine.DataFeeds.AggregationManager",

  // limits on number of symbols to allow
  "symbol-minute-limit": 10000,
  "symbol-second-limit": 10000,
  "symbol-tick-limit": 10000,

  // log missing data files, useful for debugging
  "show-missing-data-logs": true,

  // limits the amount of data points per chart series. Applies only for backtesting
  "maximum-data-points-per-chart-series": 4000,

  // if one uses true in following token, market hours will remain open all hours and all days.
  // if one uses false will make lean operate only during regular market hours.
  "force-exchange-always-open": false,

  // save list of transactions to the specified csv file
  "transaction-log": "",

  // live data configuration
  "live-data-url": "ws://www.quantconnect.com/api/v2/live/data/",
  "live-data-port": 8020,

  // live portfolio state
  "live-cash-balance": "",
  "live-holdings": "[]",

  // specify supported languages when running regression tests
  "regression-test-languages": [ "CSharp", "Python" ],

  // Additional paths to include in python for import resolution
  "python-additional-paths": [],

  "environments": {

    "backtesting": {
      "live-mode": false,
      "downloader-data-update-period": 7,
      "maximum-warmup-history-days-look-back": 8,
      "algorithm-manager-time-loop-maximum": 120,

      "setup-handler": "QuantConnect.Lean.Engine.Setup.BacktestingSetupHandler",
      "result-handler": "QuantConnect.Lean.Engine.Results.BacktestingResultHandler",
      "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.FileSystemDataFeed",
      "real-time-handler": "QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler",
      "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler",
      "history-provider": [ "QuantConnect.Lean.Engine.HistoricalData.SubscriptionDataReaderHistoryProvider" ]
    },

    "live-tradier": {
      "live-mode": true,
      "downloader-data-update-period": 0,
      "maximum-warmup-history-days-look-back": 1,
      "algorithm-manager-time-loop-maximum": 20,

      "setup-handler": "QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler",
      "result-handler": "QuantConnect.Lean.Engine.Results.LiveTradingResultHandler",
      "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed",
      "real-time-handler": "QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler",
      "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler",
      "history-provider": [ "QuantConnect.Lean.Engine.HistoricalData.SubscriptionDataReaderHistoryProvider", "QuantConnect.Lean.Engine.HistoricalData.BrokerageHistoryProvider" ],

      // real brokerage implementations require the BrokerageTransactionHandler
      "live-mode-brokerage": "TradierBrokerage",
      "data-queue-handler": [ "TradierBrokerage" ],

      // this setting will save tradier access/refresh tokens to a tradier-tokens.txt file
      // that can be read in next time, this makes it easier to start/stop a tradier algorithm
      "tradier-save-tokens": true,
      "tradier-environment": "paper",
      "tradier-account-id": "",
      "tradier-access-token": "",
      "tradier-streaming-access-token": ""
    }
  }
}
  